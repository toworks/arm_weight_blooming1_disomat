unit thread_sql_send;


interface

uses
  SysUtils, Classes, ActiveX, ZConnection, ZDataset;//, ZDbcIntfs;

type
  //«десь необходимо описать класс TThreadSql:
  TThreadSqlSend = class(TThread)

  private
    function ConfigOracleSetting(InData: boolean): boolean;
    procedure SqlSend;
    function SqlSaveToOracle(IdIn, WeightIn, TimestampIn: AnsiString): boolean;
  protected
    procedure Execute; override;
  public
    Constructor Create; overload;
    Destructor Destroy; override;
  end;

var
  ThreadSqlSend: TThreadSqlSend;


//  {$DEFINE DEBUG}


implementation

uses
  settings, logging, main, sql;




constructor TThreadSqlSend.Create;
begin
  inherited;
  ConfigOracleSetting(true);

  // создаем поток True - создание остановка, False - создание старт
  ThreadSqlSend := TThreadSqlSend.Create(True);
  ThreadSqlSend.Priority := tpNormal;
  ThreadSqlSend.FreeOnTerminate := True;
  ThreadSqlSend.Start;
end;


destructor TThreadSqlSend.Destroy;
begin
  if ThreadSqlSend <> nil then begin
    ConfigOracleSetting(false);
    ThreadSqlSend.Terminate;
  end;
  inherited Destroy;
end;


function TThreadSqlSend.ConfigOracleSetting(InData: boolean): boolean;
var
  ConnectString : String;
begin
  if InData then
  begin
      try
        OraConnect := TZConnection.Create(nil);
        OraQuery := TZQuery.Create(nil);
        ConnectString:='(DESCRIPTION = (ADDRESS_LIST = (ADDRESS = (PROTOCOL = TCP)(HOST = '
                +OraSqlSettings.ip+')(PORT = '+'1521'
                +'))) (CONNECT_DATA = (SERVICE_NAME = '+
                OraSqlSettings.db_name+')))';
        OraConnect.Database := ConnectString;
        OraConnect.LibraryLocation := '.\oci.dll';// отказалс€ от полных путей не читает
        OraConnect.Protocol := 'oracle';
        OraConnect.User := OraSqlSettings.user;
        OraConnect.Password := OraSqlSettings.password;
        OraConnect.ClientCodepage := 'CL8MSWIN1251';
        OraConnect.Connect;
        OraQuery.Connection := OraConnect;
      except
        on E: Exception do begin
          Log.save('e', E.ClassName+', с сообщением: '+E.Message);
//          ErrorConnect := true;
        end;
      end;
  end
  else
  begin
        FreeAndNil(OraQuery);
        FreeAndNil(OraConnect);
  end;

end;


procedure TThreadSqlSend.Execute;
begin
  CoInitialize(nil);
  while True do
   begin
      try
//          Synchronize(SqlSend);
          SqlSend;
      except
        on E : Exception do
          Log.save('e', E.ClassName+', с сообщением: '+E.Message);
      end;
      sleep(500);
   end;
   CoUninitialize;
end;


procedure TThreadSqlSend.SqlSend;
var
  i: integer;
  Byffer: array of array of AnsiString;
  send_error: boolean;
begin

  SQuery.Close;
  SQuery.SQL.Clear;
  SQuery.SQL.Add('SELECT id_asutp, weight,');
  SQuery.SQL.Add('datetime(timestamp, ''unixepoch'', ''localtime'' ) as timestamp');
  SQuery.SQL.Add('FROM weight');
  SQuery.SQL.Add('where transferred=0');
  SQuery.SQL.Add('order by id asc limit 10'); //порци€ми по 10 шт
  SQuery.Open;

  i := 0;
  while not SQuery.Eof do
   begin
      if i = Length(Byffer) then SetLength(Byffer, i+1, 3);
      Byffer[i,0] := SQuery.FieldByName('id_asutp').AsString;
      Byffer[i,1] := SQuery.FieldByName('weight').AsString;
      Byffer[i,2] := SQuery.FieldByName('timestamp').AsString;
      inc(i);
      SQuery.Next;
   end;

  for i := Low(Byffer) to High(Byffer) do
   begin
  {$IFDEF DEBUG}
    Log.save('d', 'id_asutp | '+Byffer[i,0]);
    Log.save('d', 'weight | '+Byffer[i,1]);
    Log.save('d', 'timestamp | '+Byffer[i,2]);
  {$ENDIF}
      try
        send_error := SqlSaveToOracle(Byffer[i,0], Byffer[i,1], Byffer[i,2]);
  {$IFDEF DEBUG}
    Log.save('d', 'send_error | '+booltostr(send_error));
  {$ENDIF}
        if not send_error then begin
            SQuery.Close;
            SQuery.SQL.Clear;
            SQuery.SQL.Add('UPDATE weight SET transferred=1');
            SQuery.SQL.Add('where id_asutp='+Byffer[i,0]+'');
            SQuery.ExecSQL;
            //save to log file
            {Log.save('sql'+#9#9+'write'+#9+'id_asutp -> '+Byffer[i,0]);
            Log.save('sql'+#9#9+'write'+#9+'weight -> '+Byffer[i,1]);
            Log.save('sql'+#9#9+'write'+#9+'timestamp -> '+Byffer[i,2]);}

            SqlReadTableLocal;//views взвешенные заготовки

            //удал€ем старые записи старше 3х дней
            SQuery.Close;
            SQuery.SQL.Clear;
            SQuery.SQL.Add('delete from weight');
            SQuery.SQL.Add('where timestamp < strftime(''%s'', ''now'') - (86400*3)');
            SQuery.ExecSQL;
        end;
      except
        on E : Exception do
          Log.save('e', E.ClassName+', с сообщением: '+E.Message);
      end;
   end;
end;


function TThreadSqlSend.SqlSaveToOracle(IdIn, WeightIn, TimestampIn: AnsiString): boolean;
var
  error: boolean;
begin
  error := false;

  try
    //была ошибака: EZSQLException, с сообщением: SQL Error: OCI_NO_DATA
    OraConnect.Reconnect;

    OraQuery.Close;
    OraQuery.SQL.Clear;
    OraQuery.SQL.Add('INSERT INTO crop');
    OraQuery.SQL.Add('(id_asutp, weight_bloom, date_weight_bloom)');
    OraQuery.SQL.Add('VALUES ('+IdIn+', '+PointReplace(WeightIn)+',');
    OraQuery.SQL.Add('TO_DATE('''+TimestampIn+''', ''yyyy-mm-dd hh24:mi:ss''))');
    OraQuery.ExecSQL;
  {$IFDEF DEBUG}
    Log.save('d', 'OraQuery insert | '+OraQuery.SQL.Text);
  {$ENDIF}
  except
    on E : Exception do begin
      error := true;
      Log.save('e', E.ClassName+', с сообщением: '+E.Message+' | '+OraQuery.SQL.Text);
    end;
  end;

  if error then
  begin
    try
        OraQuery.Close;
        OraQuery.SQL.Clear;
        OraQuery.SQL.Add('update crop');
        OraQuery.SQL.Add('set weight_bloom = '+PointReplace(WeightIn)+',');
        OraQuery.SQL.Add('date_weight_bloom = TO_DATE('''+TimestampIn+''',');
        OraQuery.SQL.Add('''yyyy-mm-dd hh24:mi:ss'')');
        OraQuery.SQL.Add('where id_asutp = '+IdIn+'');
        OraQuery.ExecSQL;
  {$IFDEF DEBUG}
    Log.save('d', 'OraQuery update | '+OraQuery.SQL.Text);
  {$ENDIF}
    except
      on E : Exception do begin
        error := true;
        Log.save('e', E.ClassName+', с сообщением: '+E.Message+' | '+OraQuery.SQL.Text);
      end;
    end;
  end;

  Result := error;

end;




// ѕри загрузке программы класс будет создаватьс€
initialization
ThreadSqlSend := TThreadSqlSend.Create;


// ѕри закрытии программы уничтожатьс€
finalization
ThreadSqlSend.Destroy;


end.

