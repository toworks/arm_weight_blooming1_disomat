unit thread_sql;


interface

uses
  SysUtils, Classes, Windows, ActiveX, Graphics, Forms;

type
  //Здесь необходимо описать класс TThreadSql:
  TThreadSql = class(TThread)

  private
    { Private declarations }
  protected
    procedure Execute; override;
  end;

var
  ThreadSql: TThreadSql;
  SqlMax: integer = 0;
  FutureDate: TDateTime;


  function ThreadSqlInit: bool;
  function SqlNewRecord: bool;
  procedure WrapperSql;//обертка для синхронизации и выполнения с другим потоком


//  {$DEFINE DEBUG}


implementation

uses
  main, logging, settings, module, sql;





procedure TThreadSql.Execute;
begin
  CoInitialize(nil);
  while True do
   begin
      Synchronize(WrapperSql);
      sleep(5000);
   end;
   CoUninitialize;
end;


function ThreadSqlInit: bool;
begin
  //создаем поток
  ThreadSql := TThreadSql.Create(False);
  ThreadSql.Priority := tpNormal;
  ThreadSql.FreeOnTerminate := True;
end;


procedure WrapperSql;
begin
  try
      Application.ProcessMessages;//следующая операция не тормозит интерфейс
      SqlNewRecord;
  except
    on E : Exception do
      SaveLog('error'+#9#9+E.ClassName+', с сообщением: '+E.Message);
  end;
end;


function SqlNewRecord: bool;
var
  pkdat_in: string;
  i, count: integer;
begin

  //сообщение оператору
  if pkdat.IsEmpty then
    ShowTrayMessage('Оператор', 'Для работы выбери взвешиваемую заготовку', 2);

  try
    Module1.pFIBQuery1.Close;
    Module1.pFIBQuery1.SQL.Clear;
    Module1.pFIBQuery1.SQL.Add('select distinct pkdat, count(pkdat) as c from ingots');
    Module1.pFIBQuery1.SQL.Add('group by pkdat');
    Module1.pFIBQuery1.SQL.Add('order by pkdat desc rows 3');
    Module1.pFIBQuery1.ExecQuery;

    //подготавливаем данные для выборки в dbgrid
    i:=0;
    count:=i;
    while not Module1.pFIBQuery1.Eof do
    begin
      if i = 0 then
        pkdat_in := ''''+Module1.pFIBQuery1.FieldByName('pkdat').AsString+''''
      else
        pkdat_in := pkdat_in+','+''''+Module1.pFIBQuery1.FieldByName('pkdat').AsString+'''';

      count := count + Module1.pFIBQuery1.FieldByName('c').AsInt64;
      inc(i);
      Module1.pFIBQuery1.Next;
    end;

    if SqlMax < count then
     begin
        SqlMax := count;
        //обновление отображение записанных данных ViewDbWeight;
        SqlReadTable(pkdat_in);

        //-- test -> при обновлении DBGrid записывается новая заготовка
        //-- Form1.b_test.Click;

  {$IFDEF DEBUG}
    SaveLog('debug'+#9#9+'count -> '+inttostr(count));
    SaveLog('debug'+#9#9+'pkdat_in -> '+pkdat_in);
  {$ENDIF}
     end;
  except
    on E : Exception do
      SaveLog('error'+#9#9+E.ClassName+', с сообщением: '+E.Message);
  end;

  try
      SqlReadTableLocal;//views взвешенные заготовки
  {$IFDEF DEBUG}
    SaveLog('debug'+#9#9+'SLQuery.RecordCount -> '+inttostr(SLQuery.RecordCount));
  {$ENDIF}
  except
    on E : Exception do
      SaveLog('error'+#9#9+E.ClassName+', с сообщением: '+E.Message);
  end;

  // двигаем мышку
  try
      if NOW > FutureDate then
      begin
        FutureDate := Now + 3 / (24 * 60); //+3 minutes
        MouseMoved;//views взвешенные заготовки
      end;
  {$IFDEF DEBUG}
    SaveLog('debug'+#9#9+'NOW -> '+datetimetostr(now));
    SaveLog('debug'+#9#9+'FutureDate -> '+datetimetostr(FutureDate));
  {$ENDIF}
  except
    on E : Exception do
      SaveLog('error'+#9#9+E.ClassName+', с сообщением: '+E.Message);
  end;

end;



end.

