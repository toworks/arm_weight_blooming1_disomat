{
Пункт меню в приборе DISOMAT 432:Интерфейсы
Интерфейс – S1
Физика - RS232
Скорость - 9600
Установление связи -  Вык
Данные – 8 бит чет
Стоповый бит - 1

Пункт меню в приборе DISOMAT 4331:Коммуникация
Интерфейс – ЭОД S1
Процедура - DDP 8785

ApdComPort
Parity - pEven


при настройке interbase
сначало устанавливается драйвер ODBC firebird
настраивается соединение в Панель управления>Все элементы панели управления>Администрирование>Источники данных (ODBC)
название соединения = firebird
ip = 10.21.22.22
путь к базе = c:\Account.gdb
login = SYSDBA
password = MASTERKEY
}

unit main;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ShellAPI, StdCtrls, Mask, Menus, Grids, DBGrids, ExtCtrls,
  CommCtrl, StrUtils, DateUtils, Data.DB, SyncObjs, logging, sql, thread_sql_read,
  thread_sql_send, thread_comport;

type
  TForm1 = class(TForm)
    l_current_id: TLabel;
    l_next_id: TLabel;
    DBGrid1: TDBGrid;
    l_n_weight_ingot: TLabel;
    l_weight_ingot: TLabel;
    l_grade: TLabel;
    l_n_grade: TLabel;
    l_n_heat: TLabel;
    l_heat: TLabel;
    l_datetime: TLabel;
    l_n_datetime: TLabel;
    l_number_ingot: TLabel;
    l_n_number_ingot: TLabel;
    gb_global: TGroupBox;
    gb_data_pu1: TGroupBox;
    gb_weighed_ingot: TGroupBox;
    gb_weighed_ingot_in_sql: TGroupBox;
    DBGrid2: TDBGrid;
    TrayIcon: TTrayIcon;
    l_n_message: TLabel;
    l_status: TLabel;
    Button1: TButton;
    procedure FormCreate(Sender: TObject);
    procedure TrayIconClick(Sender: TObject);
    procedure TrayPopUpCloseClick(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure DBGrid2DrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure DBGrid1DrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure DBGrid1DblClick(Sender: TObject);
    function CreateMenu: bool;
    procedure ActionMenuItemClick(Sender: TObject);
    procedure Button1Click(Sender: TObject);

  private

  public
    SqlMaxLocal: Int64;
    SqlMax: Int64;
    no_save: boolean;
  end;


var
  Form1: TForm1;
    PopupTray: TPopupMenu;
    TrayMark: bool = false;
    formattedDateTime: string;

    ThreadSqlRead: TThreadSqlRead;
    ThreadSqlSend: TThreadSqlSend;
    ThreadComPort: TThreadComPort;
    MainSqlite: TSqlite;
    SLDataSource: TDataSource;
    MainFSql: TFsql;
    FDataSource: TDataSource;


//    {$DEFINE DEBUG}


    function ViewSelectedIngot: bool;
    function PointReplace(DataIn: string): string;

    function TrayAppRun: bool;
    function CheckAppRun: bool;
    function ViewClear: bool;
    procedure NextWeightToRecord;
    function ShowTrayMessage(InTitle, InMessage: string; InFlag: integer): bool;
    function ManipulationWithDate(InDate: string): string;
    function MouseMoved: bool;
    procedure NextWeightToRecordLocation;
    procedure Status;
    procedure SqlReadTableLocal;

implementation

uses
  settings, {sql, thread_sql_read, thread_sql_send, thread_comport,} testing, calibration;


{$R *.dfm}





procedure TForm1.FormCreate(Sender: TObject);
begin
  //проверка 1 экземпляра программы
  CheckAppRun;

  Log.save('i', 'start '+Log.ProgFileName);

  MainSqlite := TSqlite.Create(Log);
  //отображение в dbgrid
  SLDataSource := TDataSource.Create(nil);
  SLDataSource.DataSet := MainSqlite.SQuery;
  DBGrid2.DataSource := SLDataSource;

  MainFSql := TFsql.Create(Log);
 //отображение в dbgrid
  FDataSource := TDataSource.Create(nil);
  FDataSource.DataSet := MainFSql.FQuery;
  DBGrid1.DataSource := FDataSource;

//  ThreadSqlRead := TThreadSqlRead.Create;
//  ThreadSqlSend := TThreadSqlSend.Create;
//  ThreadComPort := TThreadComPort.Create;
  ThreadSqlRead := TThreadSqlRead.Create(Log);
  ThreadSqlSend := TThreadSqlSend.Create(Log);
  ThreadComPort := TThreadComPort.Create(Log);


  Form1.Caption := SettingsApp.HeadName+'  build('+SettingsApp.GetVersion+')';
  //заголовки к showmessage
  Application.Title := Form1.Caption;

  //запрет на изменение формы
  Form1.BorderStyle := bsToolWindow;
  Form1.BorderIcons := Form1.BorderIcons - [biMaximize];

  //инициализация трея
  TrayAppRun;

  ViewClear;

  //отображение в dbgrid
  DBGRid1.DataSource := FDataSource;
//  DBGrid2.DataSource := SLDataSource;

  CreateMenu;
end;


procedure NextWeightToRecord;
var
  KeyValues : Variant;
begin
  try
      //отключаем управление
      form1.DBGrid1.DataSource.DataSet.DisableControls;
      SqlNextWeightToRecord;
      //dbgrid текущая выбраная заготовка
      NextWeightToRecordLocation;
  finally
      //включаем управление
      form1.DBGrid1.DataSource.DataSet.EnableControls;
  end;
end;


procedure NextWeightToRecordLocation;
var
  KeyValues : Variant;
begin
  try
      //отключаем управление
      form1.DBGrid1.DataSource.DataSet.DisableControls;
      //переменные по которым будет производиться поиск
      KeyValues := VarArrayOf([pkdat,num,num_ingot]);
      //поиск по ключивым полям
      form1.DBGrid1.DataSource.DataSet.Locate('pkdat;num;num_ingot', KeyValues, []);
  finally
      //включаем управление
      form1.DBGrid1.DataSource.DataSet.EnableControls;
  end;
  //-- test
  Form1.l_next_id.Caption:=pkdat+'|'+num+'|'+num_ingot;
end;


function ViewSelectedIngot: bool;
begin
  Form1.l_number_ingot.Caption := Form1.DBGrid1.DataSource.DataSet.FieldByName('NUM_INGOT').AsString;
  Form1.l_datetime.Caption := Form1.DBGrid1.DataSource.DataSet.FieldByName('TIME_INGOT').AsString;
  Form1.l_heat.Caption := Form1.DBGrid1.DataSource.DataSet.FieldByName('NUM_HEAT').AsString;
  Form1.l_grade.Caption := Form1.DBGrid1.DataSource.DataSet.FieldByName('NAME').AsString;
  Form1.l_weight_ingot.Caption := Form1.DBGrid1.DataSource.DataSet.FieldByName('WEIGHT_INGOT').AsString;
  pkdat := Form1.DBGrid1.DataSource.DataSet.FieldByName('PKDAT').AsString;
  num := Form1.DBGrid1.DataSource.DataSet.FieldByName('NUM').AsString;
  num_ingot := Form1.DBGrid1.DataSource.DataSet.FieldByName('NUM_INGOT').AsString;
  num_heat := Form1.DBGrid1.DataSource.DataSet.FieldByName('NUM_HEAT').AsString;
  smena := Form1.DBGrid1.DataSource.DataSet.FieldByName('SMENA').AsString;
end;


function PointReplace(DataIn: string): string;
begin
      result:=StringReplace(Datain,',','.', [rfReplaceAll]);
end;


function ViewClear: bool;
var
  i: integer;
begin

  for i:=0 to form1.ComponentCount - 1 do
   begin
    if (form1.Components[i] is Tlabel) then
      begin
        if copy(form1.Components[i].Name,1,4) <> 'l_n_' then
          Tlabel(Form1.FindComponent(form1.Components[i].Name)).Caption := '';
      end;
   end;

end;


procedure TForm1.DBGrid1DblClick(Sender: TObject);
begin
  // маркер следующей заготовки
  if not MarkerNextWait then begin
    try
        //отключаем управление
        form1.DBGrid1.DataSource.DataSet.DisableControls;
        if MessageDlg('Выбрать заготовку для взвешивания?', mtCustom, mbYesNo, 0) = mrYes then
          ViewSelectedIngot;
    finally
        //включаем управление
        form1.DBGrid1.DataSource.DataSet.EnableControls;
    end;
  end;
end;


procedure SqlReadTableLocal;
begin
  Log.save('e', 'SqlReadTableLocal');
  try
      MainSqlite.SQuery.Close;
      MainSqlite.SQuery.SQL.Clear;
      MainSqlite.SQuery.SQL.Add('SELECT substr(pkdat,7,1) as shift, num_ingot,');
      MainSqlite.SQuery.SQL.Add('datetime(timestamp, ''unixepoch'', ''localtime'' ) as timestamp,');
      MainSqlite.SQuery.SQL.Add('heat, weight,');
      MainSqlite.SQuery.SQL.Add('case when transferred = 1 then ''передан'' else ''не передан'' end as transferred');
      MainSqlite.SQuery.SQL.Add('FROM weight');
      MainSqlite.SQuery.SQL.Add('order by timestamp desc limit 100');
      MainSqlite.SQuery.Open;

      //исправляем отображение даты в DBGrid -> 20 characters
      TStringField(MainSqlite.SQuery.FieldByName('shift')).DisplayWidth := 3;
      TStringField(MainSqlite.SQuery.FieldByName('timestamp')).DisplayWidth := 20;
      TStringField(MainSqlite.SQuery.FieldByName('transferred')).DisplayWidth := 20;
  except
    on E : Exception do
      Log.save('e', E.ClassName+' sql read table local, с сообщением: '+E.Message);
  end;
end;


procedure TForm1.DBGrid1DrawColumnCell(Sender: TObject; const Rect: TRect;
  DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin
    if  gdSelected in State	then //color selected
    begin
      with DBGrid1.Canvas do
      begin
        (Sender as TDBGrid).Canvas.Brush.Color:= $002CB902;//green
		    (Sender as TDBGrid).Canvas.Font.Color := clHighLightText;
      end;
    end;
    Dbgrid1.DefaultDrawColumnCell(Rect, DataCol, Column, State);
end;


procedure TForm1.DBGrid2DrawColumnCell(Sender: TObject; const Rect: TRect;
  DataCol: Integer; Column: TColumn; State: TGridDrawState);
var
  R: TRect;
begin
    R := Rect;
    Dec(R.Bottom, 2);
    //проверка первого старта и отсутствие таблицы weight
    if SqlMaxLocal <> 0 then
    begin

        if  gdSelected in State	then //color selected
        begin
            with DBGrid2.Canvas do
            begin
      	  		(Sender as TDBGrid).Canvas.Brush.Color:= clMedGray;
		        	(Sender as TDBGrid).Canvas.Font.Color := clHighLightText;
            end;
		    end;

        if ( Column.FieldName = 'transferred' ) then
        begin
           if ( Column.Field.Text = 'не передан' ) then
           begin
              with DBGrid2.Canvas do
              begin
                Font.Color := clRed;
                font.Style:= [fsBold];
                (Sender as TDBGrid).Canvas.TextRect(Rect, Rect.Left + 2,
                                      Rect.Top + 2, Column.Field.AsWideString);
              end
           end
          else
           begin
              with DBGrid2.Canvas do
              begin
                Font.Color := $002CB902;//green
                font.Style:= [fsBold];
                (Sender as TDBGrid).Canvas.TextRect(Rect, Rect.Left + 2,
                                      Rect.Top + 2, Column.Field.AsWideString);
              end
          end;
      end
      else
        Dbgrid2.DefaultDrawColumnCell(Rect, DataCol, Column, State);
    end;
end;


function ShowTrayMessage(InTitle, InMessage: string; InFlag: integer): bool;
begin
{
bfNone = 0
bfInfo = 1
bfWarning = 2
bfError = 3
}

  form1.TrayIcon.BalloonTitle := InTitle;
  form1.TrayIcon.BalloonHint := TimeToStr(NOW)+#9+InMessage;
  form1.TrayIcon.BalloonFlags := TBalloonFlags(InFlag);
  form1.TrayIcon.BalloonTimeout := 4;
  form1.TrayIcon.ShowBalloonHint;
  form1.TrayIcon.OnBalloonClick := form1.TrayIconClick;
end;


// изменение последовательноси 1401292 -> 2901142, для id_asutp
function ManipulationWithDate(InDate: string): string;
var
  pkdat_correct: string;
begin
    pkdat_correct := InDate;
    pkdat_correct := StuffString(pkdat_correct, 5, 2, copy(InDate, 1,2));
    pkdat_correct := StuffString(pkdat_correct, 1, 2, copy(InDate, 5,2));
    Result := pkdat_correct;
end;


procedure Status;
var
  status: bool;
begin
  if pkdat.IsEmpty then
  begin
    //сообщение оператору
    ShowTrayMessage('Оператор', 'Для работы выбери взвешиваемую заготовку', 2);
    form1.l_status.Caption := 'выбор заготовки оператором';
    status := true;
  end;

  if (not pkdat.IsEmpty) and (not form1.no_save) then
  begin
    form1.l_status.Caption := 'ожидание данных с весового контроллера';
    status := true;
  end;

  if (not pkdat.IsEmpty) and form1.no_save then
  begin
    form1.l_status.Caption := 'подтверждение записи веса весовому контроллеру';
    status := true;
  end;

  if status then
    form1.l_status.Visible := true
  else
    form1.l_status.Visible := false;
end;


function MouseMoved: bool;
var
  MousePoint: TPoint;
begin
  GetCursorPos(MousePoint);
  {Преобразуем MousePoint к "mickeys" (аболютным координатам курсора мышки}
  MousePoint.x := Round(MousePoint.x * (65535 / Screen.Width));
  MousePoint.y := Round(MousePoint.y * (65535 / Screen.Height));
  {Переместим курсор мыши}
  Mouse_Event(MOUSEEVENTF_ABSOLUTE or MOUSEEVENTF_MOVE, MousePoint.x-20, MousePoint.y-20, 0, 0);
  {Переместим курсор мыши}
  Mouse_Event(MOUSEEVENTF_ABSOLUTE or MOUSEEVENTF_MOVE, MousePoint.x+20, MousePoint.y+20, 0, 0);
end;


function TrayAppRun: bool;
begin
    PopupTray := TPopupMenu.Create(nil);
    Form1.Trayicon.Hint := SettingsApp.HeadName;
    Form1.Trayicon.PopupMenu := PopupTray;
    PopupTray.Items.Add(NewItem('выход', 0, False, True, Form1.TrayPopUpCloseClick, 0, 'close'));
    Form1.Trayicon.Visible := True;
end;


procedure TForm1.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin
    CanClose := False;
    Form1.Hide;
end;


procedure TForm1.TrayPopUpCloseClick(Sender: TObject);
var
  buttonSelected: Integer;
begin
  try
      if assigned(ThreadComPort) then
        ThreadComPort.Terminate;
      if assigned(ThreadSqlRead) then
        ThreadSqlRead.Terminate;
      if assigned(ThreadSqlSend) then
        ThreadSqlSend.Terminate;

      MainSqlite.Destroy;
      SLDataSource.Destroy;
      MainFSql.Destroy;
      FDataSource.Destroy;

      Log.save('i', 'close '+Log.ProgFileName);

      Trayicon.Visible := false;
  finally
      //закрываем приложение
      TerminateProcess(GetCurrentProcess, 0);
  end;
end;


procedure TForm1.TrayIconClick(Sender: TObject);
begin
    if TrayMark then
     begin
//        ShowWindow(Wind, SW_SHOWNOACTIVATE);
//        SetForegroundWindow(Application.Handle);
        form1.show;
        TrayMark := false;
     end
    else
     begin
//        ShowWindow(Application.MainForm.Handle, SW_HIDE);
//        SetForegroundWindow(Application.MainForm.Handle);
        form1.hide;
        TrayMark := true;
     end

//    Trayicon1.Visible := False;
//    PopupTray.Items.Delete(0);
end;


function CheckAppRun: bool;
var
  hMutex : THandle;
begin
    // закрытие 2 экземляра программы
    hMutex := CreateMutex(0, true , PWideChar(Log.ProgFileName));
    if GetLastError = ERROR_ALREADY_EXISTS then
     begin
        Application.Title := SettingsApp.HeadName+Version;
        //прячим форму и выводим сообщение
        Application.ShowMainForm:=false;
        showmessage('Экземпляр программы уже запущен');

        CloseHandle(hMutex);
        TerminateProcess(GetCurrentProcess, 0);
     end;

end;


procedure TForm1.Button1Click(Sender: TObject);
begin
//    button1.Caption := inttostr(ThreadSqlSend.GetSqlMaxLocal);
    button1.Caption := inttostr(SqlMaxLocal);
end;

function TForm1.CreateMenu: bool;
var
    MainMenu: TMainMenu;
    itemMenu, itemTesting, itemCalibration, itemExit: TMenuItem;
begin
  MainMenu := TMainMenu.Create(form1);
  itemMenu := TMenuItem.Create(MainMenu);

  itemMenu.Caption := 'Меню';
  itemMenu.Name:='main';
  MainMenu.Items.Add(itemMenu);

  itemTesting := TMenuItem.Create(itemMenu);
  itemTesting.Caption := 'Тестирование';
  itemTesting.Name := 'testing';
  itemTesting.OnClick:= ActionMenuItemClick;
  itemMenu.Insert(0, itemTesting);

  itemCalibration := TMenuItem.Create(itemMenu);
  itemCalibration.Caption := 'Калибровка';
  itemCalibration.Name := 'calibration';
  itemCalibration.OnClick:= ActionMenuItemClick;
  itemMenu.Insert(1, itemCalibration);

  itemExit := TMenuItem.Create(itemMenu);
  itemExit.Caption := 'Выход';
  itemExit.Name := 'exit';
  itemExit.OnClick:= ActionMenuItemClick;
  itemMenu.Insert(2, itemExit);
end;


procedure TForm1.ActionMenuItemClick(Sender: TObject);
begin
  if TMenuItem(Sender).Name = 'testing' then begin
    CreateTestingForm(self);
  end;

  if TMenuItem(Sender).Name = 'calibration' then begin
    CreateCalibrationForm(self);
  end;

  if TMenuItem(Sender).Name = 'exit' then begin
    TrayPopUpCloseClick(Self);
  end;
end;




end.
