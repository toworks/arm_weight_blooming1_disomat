unit sql;

interface

uses
   Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
   Dialogs, StdCtrls, StrUtils, Data.DB;

var
    time_ingot, pkdat, num, num_ingot, num_heat, name, weight_ingot, steel_group,
    smena: string;
    SqlMaxLocal: integer = 0;
    MarkerNextWait: bool = false;

//    {$DEFINE DEBUG}


    function SqlNextWeightToRecord: bool;
    function SqlReadTable(InData: string): bool;
    function SqlSaveInBuffer(DataIn: AnsiString): Bool;
    function SqlSaveToOracle(IdIn, WeightIn, TimestampIn: AnsiString): Bool;
    function SqlSaveToOracleOfBuffer: Bool;
    function SqlReadTableLocal: bool;

implementation


uses
    main, settings, logging, module, thread_comport, thread_sql;





function SqlNextWeightToRecord: bool;
var
  i: integer;
begin
  i:=0;
  try
      SQuery.Close;
      SQuery.SQL.Clear;
      SQuery.SQL.Add('SELECT pkdat, num, num_ingot FROM weight');
      SQuery.SQL.Add('order by id desc limit 1');
      SQuery.Open;
  except
    on E : Exception do
      SaveLog('error'+#9#9+E.ClassName+', с сообщением: '+E.Message);
  end;

  try
      Module1.pFIBQuery1.Close;
      Module1.pFIBQuery1.SQL.Clear;
      Module1.pFIBQuery1.SQL.Add('select i.pkdat,i.num,i.num_ingot,h.num_heat, s.name,i.weight_ingot, i.time_ingot, s.steel_group , sh.smena');
      Module1.pFIBQuery1.SQL.Add('from ingots i, heats h, steels s, shifts sh');
      Module1.pFIBQuery1.SQL.Add('where ((i.pkdat='+ SQuery.FieldByName('pkdat').AsString +'');
      Module1.pFIBQuery1.SQL.Add('and (i.num='+ SQuery.FieldByName('num').AsString +'');
      Module1.pFIBQuery1.SQL.Add('and i.num_ingot>'+ SQuery.FieldByName('num_ingot').AsString +'');
      Module1.pFIBQuery1.SQL.Add('or i.num>'+ SQuery.FieldByName('num').AsString +'))');
      Module1.pFIBQuery1.SQL.Add('or i.pkdat>'+ SQuery.FieldByName('pkdat').AsString +')');
      Module1.pFIBQuery1.SQL.Add('and i.pkdat=h.pkdat and i.num=h.num');
      Module1.pFIBQuery1.SQL.Add('and i.pkdat=sh.pkdat');
      Module1.pFIBQuery1.SQL.Add('and h.steel_grade=s.steel_grade');
      Module1.pFIBQuery1.SQL.Add('order by i.pkdat asc, i.num asc, i.num_ingot asc');
      Application.ProcessMessages;//следующая операция не тормозит интерфейс
      Module1.pFIBQuery1.ExecQuery;
  {$IFDEF DEBUG}
    SaveLog('debug'+#9#9+'pFIBQuery1 -> '+Module1.pFIBQuery1.SQL.Text);
  {$ENDIF}
  except
    on E : Exception do
      SaveLog('error'+#9#9+E.ClassName+', с сообщением: '+E.Message);
  end;

  SaveLog('debug'+#9#9+'pkdat || -> '+Module1.pFIBQuery1.FieldByName('pkdat').AsString);
  
  if Module1.pFIBQuery1.FieldByName('pkdat').AsString = '' then
  begin
      SqlMax := 0;
      form1.l_n_message.Visible := true;
      form1.l_n_message.Font.Color := $002CB902;//green
      form1.l_n_message.Caption := ' Ожидание сдедующей заготовки ';
      MarkerNextWait := true;

      form1.l_weight_ingot.Visible := false;
      form1.l_grade.Visible := false;
      form1.l_heat.Visible := false;
      form1.l_datetime.Visible := false;
      form1.l_number_ingot.Visible := false;
      exit;
  end
  else
  begin
      form1.l_n_message.Visible := false;
      MarkerNextWait := false;
      form1.l_weight_ingot.Visible := true;
      form1.l_grade.Visible := true;
      form1.l_heat.Visible := true;
      form1.l_datetime.Visible := true;
      form1.l_number_ingot.Visible := true;      
  end;

  
  try
      while not Module1.pFIBQuery1.Eof do
      begin

SaveLog('debug'+#9#9+'pkdat -> '+Module1.pFIBQuery1.FieldByName('pkdat').AsString);
SaveLog('debug'+#9#9+'num -> '+Module1.pFIBQuery1.FieldByName('num').AsString);
SaveLog('debug'+#9#9+'num_ingot -> '+Module1.pFIBQuery1.FieldByName('num_ingot').AsString);
SaveLog('debug'+#9#9+'time_ingot -> '+Module1.pFIBQuery1.FieldByName('time_ingot').AsString);
SaveLog('debug'+#9#9+'num_heat -> '+Module1.pFIBQuery1.FieldByName('num_heat').AsString);
SaveLog('debug'+#9#9+'name -> '+Module1.pFIBQuery1.FieldByName('name').AsString);
SaveLog('debug'+#9#9+'weight_ingot -> '+Module1.pFIBQuery1.FieldByName('weight_ingot').AsString);
SaveLog('debug'+#9#9+'smena -> '+Module1.pFIBQuery1.FieldByName('smena').AsString);
          
          if i = 1 then
            break;

              pkdat := Module1.pFIBQuery1.FieldByName('pkdat').AsString;
              num := Module1.pFIBQuery1.FieldByName('num').AsString;
              num_ingot := Module1.pFIBQuery1.FieldByName('num_ingot').AsString;
              time_ingot := timetostr(Module1.pFIBQuery1.FieldByName('time_ingot').AsTime);
              num_heat := Module1.pFIBQuery1.FieldByName('num_heat').AsString;          
              name := Module1.pFIBQuery1.FieldByName('name').AsString;
              weight_ingot := Module1.pFIBQuery1.FieldByName('weight_ingot').AsString;
              smena := Module1.pFIBQuery1.FieldByName('smena').AsString;

              Form1.l_number_ingot.Caption := num_ingot;
              Form1.l_datetime.Caption := time_ingot;
              Form1.l_heat.Caption := num_heat;
              Form1.l_grade.Caption := name;
              Form1.l_weight_ingot.Caption := weight_ingot;

          //test
          Form1.l_next_id.Caption:=pkdat+'|'+num+'|'+num_ingot;

          inc(i);
          Module1.pFIBQuery1.Next;
      end;
  except
    on E : Exception do
      SaveLog('error'+#9#9+E.ClassName+', с сообщением: '+E.Message);
  end;   
end;


function SqlSaveInBuffer(DataIn: AnsiString): Bool;
var
  num_correct, num_ingot_correct, pkdat_correct: string;
begin

if MarkerNextWait then
  exit;

  pkdat_correct := ManipulationWithDate(pkdat);
  num_correct := '';
  num_ingot_correct := num_correct;

  if Length(num) = 1 then
    num_correct := '00'+num;
  if Length(num) = 2 then
    num_correct := '0'+num;
  if Length(num) = 3 then
    num_correct := num;
  if Length(num_ingot) = 1 then
    num_ingot_correct := '0'+num_ingot;
  if Length(num_ingot) = 2 then
    num_ingot_correct := num_ingot;

  {$IFDEF DEBUG}
    SaveLog('debug'+#9#9+'pkdat_correct -> '+pkdat_correct);
    SaveLog('debug'+#9#9+'num_correct -> '+num_correct);
    SaveLog('debug'+#9#9+'num_ingot_correct -> '+num_ingot_correct);
  {$ENDIF}

{ id_asutp состоит из полей pkdat+num+num_ingot, где в АСУТП pkdat состоит
  год месяц день,num номер, num_ingot номер слитка.
  в IT pkdat состоит день месяц год,num номер (3х значное нужно добавлять перед числом
  2 нуля), num_ingot (2х значное нужно добавлять перед числом 1 ноль)) номер слитка.
}
  try
      SQuery.Close;
      SQuery.SQL.Clear;
      SQuery.SQL.Add('CREATE TABLE IF NOT EXISTS weight');
      SQuery.SQL.Add('(id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL UNIQUE');
      SQuery.SQL.Add(', pkdat NUMERIC(7) NOT NULL, num NUMERIC(3) NOT NULL');
      SQuery.SQL.Add(', num_ingot NUMERIC(2) NOT NULL');      
      SQuery.SQL.Add(', id_asutp NUMERIC(12) NOT NULL');
      SQuery.SQL.Add(', heat VARCHAR(16) NOT NULL');
      SQuery.SQL.Add(', timestamp DATETIME NOT NULL');
      SQuery.SQL.Add(', weight NUMERIC(16,4)');
      SQuery.SQL.Add(', transferred NUMERIC(1,1) DEFAULT(0))');
      SQuery.ExecSQL;

      SQuery.Close;
      SQuery.SQL.Clear;
      SQuery.SQL.Add('INSERT INTO weight');
      SQuery.SQL.Add('(pkdat, num, num_ingot, id_asutp, heat, timestamp, weight)');
      SQuery.SQL.Add('VALUES('+pkdat+', '+num+', '+num_ingot+',');
      SQuery.SQL.Add(''+pkdat_correct+num_correct+num_ingot_correct+',');
      SQuery.SQL.Add(''+num_heat+', strftime(''%s'',''now''), '+PointReplace(DataIn)+')');      
      SQuery.ExecSQL;

  except
    on E : Exception do
      SaveLog('error'+#9#9+E.ClassName+', с сообщением: '+E.Message);
  end;

  SQuery.Close;
  SQuery.SQL.Clear;
  SQuery.SQL.Add('SELECT pkdat, num, num_ingot, id_asutp,');
  SQuery.SQL.Add('datetime(timestamp, ''unixepoch'', ''localtime'') as timestamp, weight FROM weight');
  SQuery.SQL.Add('where id_asutp='+pkdat_correct+num_correct+num_ingot_correct+'');
  SQuery.Open;

  //save to log file
  {SaveLog('sql'+#9#9+'write'+#9+'id_asutp -> '+SQuery.FieldByName('id_asutp').AsString);
  SaveLog('sql'+#9#9+'write'+#9+'weight -> '+SQuery.FieldByName('weight').AsString);}

  //сообщение оператору
  ShowTrayMessage('Заготовка', '№: '+num_ingot+#9+'вес: '+SQuery.FieldByName('weight').AsString, 1);
  //последняя взвешенная заготовка
  form1.l_last_save_weight.Caption := SQuery.FieldByName('timestamp').AsString;

  {$IFDEF DEBUG}
    SaveLog('debug'+#9#9+'pkdat_correct -> '+SQuery.FieldByName('id_asutp').AsString);
  {$ENDIF}

  try
      SqlReadTableLocal;//views взвешенные заготовки
  except
    on E : Exception do
      SaveLog('error'+#9#9+E.ClassName+', с сообщением: '+E.Message);
  end;

//-- test отключаю передачу в сит
{  try
    SqlSaveToOracle(SQuery.FieldByName('id_asutp').AsString, SQuery.FieldByName('weight').AsString
                    , SQuery.FieldByName('timestamp').AsString);

    SQuery.Close;
    SQuery.SQL.Clear;
    SQuery.SQL.Add('UPDATE weight SET transferred=1');
    SQuery.SQL.Add('where id_asutp='+pkdat_correct+num_correct+num_ingot_correct+'');
    SQuery.ExecSQL;
  except
      on E : Exception do
        SaveLog('error'+#9#9+E.ClassName+', с сообщением: '+E.Message);
  end;}
//-- test

  //удаляем записи старше 6 месяцев 2629743(один месяц)*6
  try
      SQuery.Close;
      SQuery.SQL.Clear;
      SQuery.SQL.Add('DELETE FROM weight');
      SQuery.SQL.Add('where timestamp<(strftime(''%s'',''now'')-(2629743*6))');
      SQuery.ExecSQL;
   except
    on E : Exception do
      SaveLog('error'+#9#9+E.ClassName+', с сообщением: '+E.Message);
  end;
  //следующая запись (слиток) от записаной
  NextWeightToRecord;

  //шлем признак записи
  SendAttribute;

  //записываем, что не записано до этого
  SqlSaveToOracleOfBuffer;
end;


function SqlSaveToOracleOfBuffer: Bool;
var
  i: integer;
  Byffer: array of array of variant;
begin
  SQuery.Close;
  SQuery.SQL.Clear;
  SQuery.SQL.Add('SELECT id_asutp, weight,');
  SQuery.SQL.Add('datetime(timestamp, ''unixepoch'', ''localtime'' ) as timestamp');
  SQuery.SQL.Add('FROM weight');
  SQuery.SQL.Add('where transferred=0');
  SQuery.SQL.Add('order by id asc limit 10'); //порциями по 10 шт
  SQuery.Open;

  i := 0;
  while not SQuery.Eof do
   begin
      if i = Length(Byffer) then SetLength(Byffer, i+1, 2);
      Byffer[i,0] := SQuery.FieldByName('id_asutp').AsString;
      Byffer[i,1] := SQuery.FieldByName('weight').AsString;
      Byffer[i,2] := SQuery.FieldByName('timestamp').AsString;      
      inc(i);
      SQuery.Next;
   end;

  for i := Low(Byffer) to High(Byffer) do
   begin
    {$IFDEF DEBUG}
      SaveLog('debug'+#9#9+'id_asutp -> '+Byffer[i,0]);
      SaveLog('debug'+#9#9+'weight -> '+Byffer[i,1]);
      SaveLog('debug'+#9#9+'timestamp -> '+Byffer[i,2]);
    {$ENDIF}
      try
        SqlSaveToOracle(Byffer[i,0], Byffer[i,1], Byffer[i,2]);

        SQuery.Close;
        SQuery.SQL.Clear;
        SQuery.SQL.Add('UPDATE weight SET transferred=1');
        SQuery.SQL.Add('where id_asutp='+Byffer[i,0]+'');
        SQuery.ExecSQL;
        //save to log file
        SaveLog('sql'+#9#9+'write'+#9+'id_asutp -> '+Byffer[i,0]);
        SaveLog('sql'+#9#9+'write'+#9+'weight -> '+Byffer[i,1]);
        SaveLog('sql'+#9#9+'write'+#9+'timestamp -> '+Byffer[i,2]);
      except
        on E : Exception do
          SaveLog('error'+#9#9+E.ClassName+', с сообщением: '+E.Message);
      end;
   end;
end;


function SqlSaveToOracle(IdIn, WeightIn, TimestampIn: AnsiString): Bool;
begin

    Module1.OraQuery1.FetchAll := true;
    Module1.OraQuery1.Close;
    Module1.OraQuery1.SQL.Clear;
    Module1.OraQuery1.SQL.Add('INSERT INTO crop');
    Module1.OraQuery1.SQL.Add('(id_asutp, weight_bloom, date_weight_bloom)');
    Module1.OraQuery1.SQL.Add('VALUES ('+IdIn+', '+PointReplace(WeightIn)+',');
//TO_DATE('2003-05-03 21:02:44', 'yyyy-mm-dd hh24:mi:ss')
    Module1.OraQuery1.SQL.Add('TO_DATE('''+TimestampIn+''', ''yyyy-mm-dd hh24:mi:ss''))');
    Application.ProcessMessages;//следующая операция не тормозит интерфейс
//-- test отключаю передачу в сит
//    Module1.OraQuery1.ExecSQL;
//-- test

  {$IFDEF DEBUG}
    SaveLog('debug'+#9#9+'Module1.OraQuery1.SQL.Text -> '+Module1.OraQuery1.SQL.Text);
  {$ENDIF}
end;


function SqlReadTable(InData: string): bool;
begin
  Module1.pFIBDataSet1.Active := false;
  Module1.pFIBDataSet1.Close;
  Module1.pFIBDataSet1.SQLs.SelectSQL.Clear;
  Module1.pFIBDataSet1.SQLs.SelectSQL.Add('select i.pkdat,i.num,i.num_ingot,h.num_heat, s.name,i.weight_ingot, i.time_ingot, s.steel_group, sh.smena');
  Module1.pFIBDataSet1.SQLs.SelectSQL.Add('from ingots i, heats h, steels s, shifts sh');
  Module1.pFIBDataSet1.SQLs.SelectSQL.Add('where i.pkdat=h.pkdat');
  Module1.pFIBDataSet1.SQLs.SelectSQL.Add('and i.pkdat=sh.pkdat');
  Module1.pFIBDataSet1.SQLs.SelectSQL.Add('and i.num=h.num');
  Module1.pFIBDataSet1.SQLs.SelectSQL.Add('and h.steel_grade=s.steel_grade');
  Module1.pFIBDataSet1.SQLs.SelectSQL.Add('and i.pkdat in ('+InData+')');
  Module1.pFIBDataSet1.SQLs.SelectSQL.Add('order by i.pkdat desc, i.num desc, i.num_ingot desc');
//  Application.ProcessMessages;//следующая операция не тормозит интерфейс
  Module1.pFIBDataSet1.Open;
  Module1.pFIBDataSet1.Active := true;

  //исправляем отображение даты в DBGrid -> pFIBDataSet1
  TDateTimeField(Module1.pFIBDataSet1.FieldByName('time_ingot')).DisplayFormat:='hh:nn:ss';

  form1.l_current_shift.Caption := CurrentShift;
end;


function SqlReadTableLocal: bool;
begin

  if SqlMaxLocal = 0 then
  begin
      SLQuery.Close;
      SLQuery.SQL.Clear;
      SLQuery.SQL.Add('select * from sqlite_master');
      SLQuery.SQL.Add('where type = ''table'' and tbl_name = ''weight''');
      SLQuery.Open;

      if SLQuery.FieldByName('tbl_name').IsNull then
        exit;
  end;

  SDataSource.DataSet.ControlsDisabled;

  SLQuery.Close;
  SLQuery.SQL.Clear;
  SLQuery.SQL.Add('SELECT num_ingot,');
  SLQuery.SQL.Add('datetime(timestamp, ''unixepoch'', ''localtime'' ) as timestamp,');
  SLQuery.SQL.Add('heat, weight,');
  SLQuery.SQL.Add('case when transferred = 1 then ''передан'' else ''не передан'' end as transferred');
  SLQuery.SQL.Add('FROM weight');
  SLQuery.SQL.Add('order by timestamp desc limit 100');
  SLQuery.Open;

  if (SqlMaxLocal < SLQuery.RecordCount) and SDataSource.Enabled then
  begin
        SqlMaxLocal := SLQuery.RecordCount;
        SDataSource.DataSet.EnableControls;
  end;

  //исправляем отображение даты в DBGrid -> 20 characters
  TStringField(SDataSource.DataSet.FieldByName('timestamp')).DisplayWidth := 20;
  TStringField(SDataSource.DataSet.FieldByName('transferred')).DisplayWidth := 20;
end;


end.
