unit thread_comport;


interface

uses
  SysUtils, Classes, ActiveX, synaser, SyncObjs, logging;

type
  //Здесь необходимо описать класс TThreadComPort:
  TThreadComPort = class(TThread)

  private
    count: integer;

    procedure ReadToMessage;
  protected
    procedure Execute; override;
  public

    no_save: boolean;

    Constructor Create(_Log: TLog); overload;
    Destructor Destroy; override;

    function CPortParity(InData: String): Char;
    function SendReadToSerial(InData: AnsiString): AnsiString;
    function SendAttribute: boolean;
    function hash_bcc(InChar: string): Char;
    function ReceiveData(Data: AnsiString): string;
  end;

var
  ThreadComPort: TThreadComPort;
  Log: TLog;
//    function SendAttribute: boolean;


//  {$DEFINE DEBUG}


implementation

uses
  settings, main, sql, testing, calibration;




constructor TThreadComPort.Create(_Log: TLog);
begin
  inherited Create(True);

  Log := _Log;
  // создаем поток True - создание остановка, False - создание старт
  ThreadComPort := TThreadComPort.Create(True);
  ThreadComPort.Priority := tpNormal;
  ThreadComPort.FreeOnTerminate := True;
  ThreadComPort.Start;

  no_save := false;
  count := 10;
end;


destructor TThreadComPort.Destroy;
begin
  if TThreadComPort <> nil then begin
    ThreadComPort.Terminate;
  end;
  inherited Destroy;
end;


procedure TThreadComPort.Execute;
begin
  CoInitialize(nil);
  while True do
  begin
      try
          ReadToMessage;
      except
        on E : Exception do
          Log.save('e', E.ClassName+', с сообщением: '+E.Message);
      end;

      sleep(1000);
   end;
   CoUninitialize;
end;


function TThreadComPort.SendReadToSerial(InData: AnsiString): AnsiString;
var
  serial_port: TBlockserial;
begin
    //status работы с контроллером
    if count > 10 then begin
      Synchronize(Status);
      count := 0;
    end
    else
      inc(count);

    try
        serial_port := TBlockserial.Create;
        serial_port.RaiseExcept := false; //false игнорировать ошибки порта
        serial_port.Connect('COM'+SerialPortSettings.serial_port_number);
        if serial_port.InstanceActive then begin
//          serial_port.Config(19200,8,'E',SB2,false,false);
          serial_port.Config( strtoint(SerialPortSettings.baud),
                              strtoint(SerialPortSettings.data_bits),
                              CPortParity(SerialPortSettings.parity),
                              strtoint(SerialPortSettings.stop_bits),false,false);
          serial_port.SendString(InData);
          sleep(200);
          Result := serial_port.RecvBufferStr(serial_port.WaitingData, 200);
       end;
    finally
          FreeAndNil(serial_port);
    end;
end;


procedure TThreadComPort.ReadToMessage;
var
    msg: AnsiString;
begin
  msg := SendReadToSerial(#2'00#TK#'#16#3+hash_bcc('00#TK#'#16#3));

  ReceiveData(msg);

  if no_save then
    SendAttribute;

  {$IFDEF DEBUG}
    Log.save('d', 'no_save | '+booltostr(no_save));
  {$ENDIF}
end;


function TThreadComPort.hash_bcc(InChar: string): char;
var
    i: byte;
begin
  result := InChar[1];
  for i := 2 to length(InChar) do
  result := char(ord(result) xor ord(InChar[i]));
end;


function TThreadComPort.ReceiveData(Data: AnsiString): string;
begin
  if (copy(Data, 2, 6) = '00#EK#') and (copy(Data, 8, 1) = '0') then
  begin
      no_save := false;//запрещаем отправку подтверждения в контроллер -> сброс в SqlSaveInBuffer
  end;
//{ test }  if (copy(Data, 2, 6) = '00#TK#') and (copy(Data, 26, 1) = '1') and (no_save = false) then
  if ( copy(Data, 2, 6) = '00#TK#' ) and (copy(Data, 28, 1) = '1')
      and (no_save = false) then
  begin
      if ( trim(copy(Data, 40, 6)) <> '' ) then begin //не пропускать пустых значений
          if pkdat <> '' then
    //{ test }      SqlSaveInBuffer(trim(copy(Data, 60, 6)))
            SqlSaveInBuffer(trim(copy(Data, 40, 6)))
          else
            Log.save('w', 'заготовка не выбрана'+#9+'weight -> '+trim(copy(Data, 40, 6)));
        //copy(Data, 2, 6);          //ответ по весу
        //copy(Data, 28, 1);         //признак
        //trim(copy(Data, 40, 6));   //вес только целая часть
      end;
  end;

  //тестирование
  if assigned(MemoTesting) then
    MemoTestingAdd('receive Com'+SerialPortSettings.serial_port_number+' | '+Data);

  //калибровка
  if assigned(CalibrationForm) then
    CalibrationForm.l_calibration.caption := trim(copy(Data, 40, 6));
end;


function TThreadComPort.SendAttribute: boolean;
var
    msg: AnsiString;
begin
  try
    main.cs.Enter;
    //передаем ЭОД вход1-4 переменные 1|0|0|0
    msg := SendReadToSerial(#2'00#EK#1#0#0#0#'#16#3+hash_bcc('00#EK#1#0#0#0#'#16#3));
    ReceiveData(msg);
  except
    on E : Exception do
      Log.save('e', E.ClassName+', с сообщением: '+E.Message);
  end;
    main.cs.Leave;
end;


function TThreadComPort.CPortParity(InData: String): Char;
{
pNone=0
pOdd=1
pEven=2
pMark=3
pSpace=4
}
begin
  if InData = 'none' then
     result := 'N';
  if InData = 'odd' then
     result := 'O';
  if InData = 'even' then
     result := 'E';
  if InData = 'mark' then
     result := 'M';
  if InData = 'space' then
     result := 'S';
end;


// При загрузке программы класс будет создаваться
initialization
//ThreadComPort := TThreadComPort.Create;


// При закрытии программы уничтожаться
finalization
//ThreadComPort.Destroy;


end.

