unit sql;

interface

uses
   SysUtils, ActiveX, Variants, Classes, StrUtils, Data.DB, ZConnection, ZDataset,
   ZDbcIntfs, SyncObjs, logging;

var
    time_ingot, pkdat, num, num_ingot, num_heat, name, weight_ingot, steel_group,
    smena: string;
    MarkerNextWait: boolean = false;


//    {$DEFINE DEBUG}


    function ConfigFirebirdSetting(InData: boolean): boolean;
    function SqlNextWeightToRecord: boolean;



type
  TSqlite = class
  private
    FQuery: TZQuery;
    FSConnect: TZConnection;
    Log: TLog;
    function ConfigSettings(InData: boolean): boolean;
  public
    Constructor Create(_Log: TLog); overload;
    Destructor Destroy; override;
    property SConnect: TZConnection read FSConnect write FSConnect;
    property SQuery: TZQuery read FQuery write FQuery;
  end;


type
  TFsql = class
  private
    FFQuery: TZQuery;
    FFConnect: TZConnection;
    Log: TLog;
    function ConfigSettings(InData: boolean): boolean;
  public
    Constructor Create(_Log: TLog); overload;
    Destructor Destroy; override;
    property FConnect: TZConnection read FFConnect write FFConnect;
    property FQuery: TZQuery read FFQuery write FFQuery;
  end;


implementation


uses
    settings, {thread_sql_send,} thread_comport, thread_sql_read, main;



constructor TSqlite.Create(_Log: TLog);
begin
  inherited Create;
  Log := _Log;
  ConfigSettings(true);
end;


destructor TSqlite.Destroy;
begin
  ConfigSettings(false);
  inherited Destroy;
end;


function TSqlite.ConfigSettings(InData: boolean): boolean;
begin
  if InData then
   begin
      try
        SConnect := TZConnection.Create(nil);
        SQuery := TZQuery.Create(nil);
        SConnect.Database := '.\'+SettingsApp.DBFile;
        SConnect.LibraryLocation := '.\sqlite3.dll';
        SConnect.Protocol := 'sqlite-3';
        SConnect.Connect;
        SQuery.Connection := SConnect;
      except
        on E : Exception do
          Log.save('e', E.ClassName+' sqlite config settings, с сообщением: '+E.Message);
      end;
   end
  else
   begin
      SQuery.Destroy;
      SConnect.Destroy;
   end;
end;


constructor TFsql.Create(_Log: TLog);
begin
  inherited Create;
  Log := _Log;
  ConfigSettings(true);
end;


destructor TFsql.Destroy;
begin
  ConfigSettings(false);
  inherited Destroy;
end;


function TFsql.ConfigSettings(InData: boolean): boolean;
begin
  if InData then
  begin
      try
        FFConnect := TZConnection.Create(nil);
        FFQuery := TZQuery.Create(nil);
        FFConnect.LibraryLocation := '.\fbclient.dll';// отказался от полных путей не читает
        FFConnect.Protocol := 'firebird-2.5';
        FFConnect.Database := FbSqlSettings.db_name;
        FFConnect.HostName := FbSqlSettings.ip;
        FFConnect.User := FbSqlSettings.user;
        FFConnect.Password := FbSqlSettings.password;
        FFConnect.ReadOnly := True;
        FFConnect.LoginPrompt := false;
        FFConnect.Port := 3050;
        FFConnect.AutoCommit := False;
        FFConnect.TransactIsolationLevel := tiReadCommitted;
        with FFConnect.Properties do
        begin
             Add('Dialect=3');
             Add('isc_tpb_read_committed');
             Add('isc_tpb_concurrency');              // Needed for multiuser environments
             Add('isc_tpb_nowait');                   // Needed for multiuser environments
             Add('timeout=3');
//             Add('codepage=NONE');
//             Add('controls_cp=CP_UTF8');
//             Add('AutoEncodeStrings=ON');
//             Add('codepage=win1251');
//             Add('client_encoding=UTF8');
        end;
        FFConnect.Connect;
        FFQuery.Connection := FConnect;
      except
        on E: Exception do begin
          Log.save('e', E.ClassName+', с сообщением: '+E.Message);
        end;
      end;
  end
  else
  begin
        FreeAndNil(FFQuery);
        FreeAndNil(FFConnect);
  end;
end;


function SqlNextWeightToRecord: boolean;
var
  _SQuery: TZQuery;
  FQueryNextRecord: TZQuery;
  i: integer;
begin

  i:=0;
{-----------  try
      _SQuery := TZQuery.Create(nil);
      _SQuery.Connection := SettingsApp.Sconnect; //SConnect;
      _SQuery.Close;
      _SQuery.SQL.Clear;
      _SQuery.SQL.Add('SELECT pkdat, num, num_ingot FROM weight');
      _SQuery.SQL.Add('order by id desc limit 1');
      _SQuery.Open;
  except
    on E : Exception do begin
      Log.save('e', E.ClassName+' sql 1, с сообщением: '+E.Message);
      exit;
    end;
  end;}

  try
      FQueryNextRecord := TZQuery.Create(nil);
      FQueryNextRecord.Connection := FConnect;
      FQueryNextRecord.Close;
      FQueryNextRecord.SQL.Clear;
      FQueryNextRecord.SQL.Add('select i.pkdat,i.num,i.num_ingot,h.num_heat, s.name,i.weight_ingot, i.time_ingot, s.steel_group , sh.smena');
      FQueryNextRecord.SQL.Add('from ingots i, heats h, steels s, shifts sh');
      FQueryNextRecord.SQL.Add('where ((i.pkdat='+ _SQuery.FieldByName('pkdat').AsString +'');
      FQueryNextRecord.SQL.Add('and (i.num='+ _SQuery.FieldByName('num').AsString +'');
      FQueryNextRecord.SQL.Add('and i.num_ingot>'+ _SQuery.FieldByName('num_ingot').AsString +'');
      FQueryNextRecord.SQL.Add('or i.num>'+ _SQuery.FieldByName('num').AsString +'))');
      FQueryNextRecord.SQL.Add('or i.pkdat>'+ _SQuery.FieldByName('pkdat').AsString +')');
      FQueryNextRecord.SQL.Add('and i.pkdat=h.pkdat and i.num=h.num');
      FQueryNextRecord.SQL.Add('and i.pkdat=sh.pkdat');
      FQueryNextRecord.SQL.Add('and h.steel_grade=s.steel_grade');
      FQueryNextRecord.SQL.Add('order by i.pkdat asc, i.num asc, i.num_ingot asc');
      FQueryNextRecord.Open;
  {$IFDEF DEBUG}
    Log.save('d', 'FQueryNextRecord -> '+FQueryNextRecord.SQL.Text);
  {$ENDIF}
  except
    on E : Exception do
      Log.save('e', E.ClassName+' sql 2, с сообщением: '+E.Message);
  end;

  {$IFDEF DEBUG}
    Log.save('d', 'pkdat empty? -> '+FQueryNextRecord.FieldByName('pkdat').AsString);
  {$ENDIF}

  try
      // маркер следующей заготовки (ожидание)
      if FQueryNextRecord.FieldByName('pkdat').AsString = '' then
      begin
          form1.SqlMax := 0;
          form1.l_n_message.Visible := true;
          form1.l_n_message.Font.Color := $002CB902;//green
          form1.l_n_message.Caption := ' Ожидание сдедующей заготовки ';
          MarkerNextWait := true;

          form1.l_weight_ingot.Visible := false;
          form1.l_grade.Visible := false;
          form1.l_heat.Visible := false;
          form1.l_datetime.Visible := false;
          form1.l_number_ingot.Visible := false;
          FreeAndNil(_SQuery);
          FreeAndNil(FQueryNextRecord);//утечка памяти
          exit;
      end
      else
      begin
          form1.l_n_message.Visible := false;
          MarkerNextWait := false;
          form1.l_weight_ingot.Visible := true;
          form1.l_grade.Visible := true;
          form1.l_heat.Visible := true;
          form1.l_datetime.Visible := true;
          form1.l_number_ingot.Visible := true;
      end;
  except
    on E : Exception do
      Log.save('e', E.ClassName+' sql 3, с сообщением: '+E.Message);
  end;

  try
      while not FQueryNextRecord.Eof do
      begin
          if i = 1 then
            break;

          pkdat := FQueryNextRecord.FieldByName('pkdat').AsString;
          num := FQueryNextRecord.FieldByName('num').AsString;
          num_ingot := FQueryNextRecord.FieldByName('num_ingot').AsString;
          time_ingot := timetostr(FQueryNextRecord.FieldByName('time_ingot').AsDateTime);
          num_heat := FQueryNextRecord.FieldByName('num_heat').AsString;
          name := FQueryNextRecord.FieldByName('name').AsString;
          weight_ingot := FQueryNextRecord.FieldByName('weight_ingot').AsString;
          smena := FQueryNextRecord.FieldByName('smena').AsString;

          Form1.l_number_ingot.Caption := num_ingot;
          Form1.l_datetime.Caption := time_ingot;
          Form1.l_heat.Caption := num_heat;
          Form1.l_grade.Caption := name;
          Form1.l_weight_ingot.Caption := weight_ingot;

          //-- test
          Form1.l_next_id.Caption:=pkdat+'|'+num+'|'+num_ingot;

          inc(i);
          FQueryNextRecord.Next;
      end;
  except
    on E : Exception do
      Log.save('e', E.ClassName+' sql 4, с сообщением: '+E.Message);
  end;

  FreeAndNil(_SQuery);
  FreeAndNil(FQueryNextRecord);
end;







end.
