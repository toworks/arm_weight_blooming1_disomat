{

CREATE TABLE settings (
    name  VARCHAR( 50 )   PRIMARY KEY
                          NOT NULL
                          UNIQUE,
    value VARCHAR( 256 )
);

INSERT INTO [settings] ([name], [value]) VALUES ('::FbSql::ip', '10.21.22.22');
INSERT INTO [settings] ([name], [value]) VALUES ('::FbSql::user', 'sysdba');
INSERT INTO [settings] ([name], [value]) VALUES ('::FbSql::password', 'masterkey');
INSERT INTO [settings] ([name], [value]) VALUES ('::FbSql::db_name', 'c:\Account.gdb');
INSERT INTO [settings] ([name], [value]) VALUES ('::FbSql::library', 'fbclient.dll');
INSERT INTO [settings] ([name], [value]) VALUES ('::OraSql::ip', 'krr-sql24');
INSERT INTO [settings] ([name], [value]) VALUES ('::OraSql::user', 'asutp');
INSERT INTO [settings] ([name], [value]) VALUES ('::OraSql::password', 'bl2');
INSERT INTO [settings] ([name], [value]) VALUES ('::OraSql::db_name', 'reserv');
INSERT INTO [settings] ([name], [value]) VALUES ('::FbSql::dialect', 3);
INSERT INTO [settings] ([name], [value]) VALUES ('::OraSql::port', 1521);
INSERT INTO [settings] ([name], [value]) VALUES ('::ComPort::baud', 9600);
INSERT INTO [settings] ([name], [value]) VALUES ('::ComPort::data_bits', 8);
INSERT INTO [settings] ([name], [value]) VALUES ('::ComPort::parity', 'Even');
INSERT INTO [settings] ([name], [value]) VALUES ('::ComPort::stop_bits', 1);
INSERT INTO [settings] ([name], [value]) VALUES ('::ComPort::number', 1);

}

unit settings;

interface

uses
  SysUtils, Classes, Windows, ActiveX, ZAbstractDataset, ZDataset,
  ZAbstractConnection, ZConnection, ZAbstractRODataset, ZStoredProcedure;

type
  TSettings = class
  private
     SQuery: TZQuery;
  public
    Constructor Create; overload;
    Destructor Destroy; override;

    function ConfigSettings(InData: bool): bool;
    function ReadConfigSettings: bool;
    function GetVersion: string;// Версия сборки программы
  end;

  TSqlSettings = Record
    ip            : string[20];
    port          : string[10];
    db_name       : string[255];
    lib           : string[20];
    dialect       : string[1];
    user          : string[50];
    password      : string[50];
  end;

  TSerialSettings = Record
    baud                  : string[10];
    data_bits             : string[1];
    parity                : string[10];
    stop_bits             : string[1];
    serial_port_number    : string[3];
  end;

var
   SettingsApp: TSettings;
   CurrentDir: string;
   HeadName: string = ' АРМ резчика ПУ-4 ';
   DBFile: string = 'data.sdb';

   SConnect: TZConnection;
   FbSqlSettings: TSqlSettings;
   OraSqlSettings: TSqlSettings;
   SerialPortSettings: TSerialSettings;


//   {$DEFINE DEBUG}



implementation

uses
  main, logging, sql;



constructor TSettings.Create;
begin
  inherited Create;
  //текущая дириктория
  CurrentDir := GetCurrentDir;
  ConfigSettings(true);
end;


destructor TSettings.Destroy;
begin
  ConfigSettings(false);
  inherited Destroy;
end;


function TSettings.ConfigSettings(InData: bool): bool;
var
  f: File of Word;
begin

  if InData then
   begin

      SConnect := TZConnection.Create(nil);
      SQuery := TZQuery.Create(nil);

      try
        SConnect.Database := CurrentDir+'\'+DBFile;
        SConnect.LibraryLocation := CurrentDir+'\sqlite3.dll';
        SConnect.Protocol := 'sqlite-3';
        SConnect.Connect;
        SQuery.Connection := SConnect;

        ReadConfigSettings;

      except
        on E : Exception do
          Log.save('e', E.ClassName+', с сообщением: '+E.Message);
      end;
   end
  else
   begin
      SQuery.Destroy;
      SConnect.Destroy;
   end;

end;


function TSettings.ReadConfigSettings: bool;
var
  i: integer;
begin

    SQuery.Close;
    SQuery.SQL.Clear;
    SQuery.SQL.Add('SELECT * FROM settings');
    SQuery.Open;


    while not SQuery.Eof do
     begin
      //fbsql
      if SQuery.FieldByName('name').AsString = '::FbSql::ip' then
        FbSqlSettings.ip := SQuery.FieldByName('value').AsString;
      if SQuery.FieldByName('name').AsString = '::FbSql::db_name' then
        FbSqlSettings.db_name := SQuery.FieldByName('value').AsString;
      if SQuery.FieldByName('name').AsString = '::FbSql::library' then
        FbSqlSettings.lib := SQuery.FieldByName('value').AsString;
      if SQuery.FieldByName('name').AsString = '::FbSql::dialect' then
        FbSqlSettings.dialect := SQuery.FieldByName('value').AsString;
      if SQuery.FieldByName('name').AsString = '::FbSql::user' then
        FbSqlSettings.user := SQuery.FieldByName('value').AsString;
      if SQuery.FieldByName('name').AsString = '::FbSql::password' then
        FbSqlSettings.password := SQuery.FieldByName('value').AsString;

      //orasql
      if SQuery.FieldByName('name').AsString = '::OraSql::ip' then
        OraSqlSettings.ip := SQuery.FieldByName('value').AsString;
      if SQuery.FieldByName('name').AsString = '::OraSql::port' then
        OraSqlSettings.port := SQuery.FieldByName('value').AsString;
      if SQuery.FieldByName('name').AsString = '::OraSql::db_name' then
        OraSqlSettings.db_name := SQuery.FieldByName('value').AsString;
      if SQuery.FieldByName('name').AsString = '::OraSql::user' then
        OraSqlSettings.user := SQuery.FieldByName('value').AsString;
      if SQuery.FieldByName('name').AsString = '::OraSql::password' then
        OraSqlSettings.password := SQuery.FieldByName('value').AsString;

      //comport
      if SQuery.FieldByName('name').AsString = '::ComPort::baud' then
        SerialPortSettings.baud := SQuery.FieldByName('value').AsString;
      if SQuery.FieldByName('name').AsString = '::ComPort::data_bits' then
        SerialPortSettings.data_bits := SQuery.FieldByName('value').AsString;
      if SQuery.FieldByName('name').AsString = '::ComPort::parity' then
        SerialPortSettings.parity := AnsiLowerCase(SQuery.FieldByName('value').AsString);
      if SQuery.FieldByName('name').AsString = '::ComPort::stop_bits' then
        SerialPortSettings.stop_bits := SQuery.FieldByName('value').AsString;
      if SQuery.FieldByName('name').AsString = '::ComPort::number' then
        SerialPortSettings.serial_port_number := SQuery.FieldByName('value').AsString;

        SQuery.Next;
     end;

 {$IFDEF DEBUG}
  Log.save('debug'+#9#9+'SerialPortSettings.baud -> '+SerialPortSettings.baud);
  Log.save('debug'+#9#9+'SerialPortSettings.data_bits -> '+SerialPortSettings.data_bits);
  Log.save('debug'+#9#9+'SerialPortSettings.parity -> '+SerialPortSettings.parity);
  Log.save('debug'+#9#9+'SerialPortSettings.stop_bits -> '+SerialPortSettings.stop_bits);
  Log.save('debug'+#9#9+'SerialPortSettings.serial_port_number -> '+SerialPortSettings.serial_port_number);
 {$ENDIF}

end;


function TSettings.GetVersion: string;
type
  TVerInfo=packed record
    Nevazhno: array[0..47] of byte; // ненужные нам 48 байт
    Minor, Major, Build, Release: word; // а тут версия
  end;
var
  s: TResourceStream;
  v: TVerInfo;
begin
  result := '';
  try
    s := TResourceStream.Create(HInstance, '#1', RT_VERSION); // достаём ресурс
    if s.Size > 0 then begin
      s.Read(v,SizeOf(v)); // читаем нужные нам байты
      result := Format('%d%d%d%d', [v.Major, v.Minor, v.Release, v.Build]);
   end;
  finally
      s.Free;
  end;
end;


// При загрузке программы класс будет создаваться
initialization
SettingsApp := TSettings.Create;
ConfigFirebirdSetting(true);
ConfigSqliteSetting;
SqlLocalCreateTable; //create local sqlite table

//При закрытии программы уничтожаться
finalization
ConfigFirebirdSetting(false);
SettingsApp.Destroy;

end.

